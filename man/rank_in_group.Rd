% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rank_in_group.R
\name{rank_in_group}
\alias{rank_in_group}
\alias{rank_in_group2}
\title{Create a rank variable by group in a data frame}
\usage{
rank_in_group(data)

rank_in_group2(data, group_var, arrange_var)
}
\arguments{
\item{data}{A data frame}

\item{group_var}{A variable to group by}

\item{arrange_var}{A variable to arrange (descending) by}
}
\value{
A data frame with an added column \code{rank}
}
\description{
Rank within a group of specified variables in a data frame. I can't remember
where I saw this function originally but it's a simple clean way to do the
intended task.

\code{rank_in_group} is intended to be used in a pipe where \code{dplyr::group_by()}
and \code{dplyr::arrange()} were applied already. See the example below for this
use.

\code{rank_in_group2} takes a data frame, grouping variable, and arranging
variable as arguments and returns a data frame with a column, \code{rank} added.
Similar to \code{rank_in_group} but works on it's own outside a pipe.
}
\examples{
library(dplyr)
res <- iris \%>\%
  dplyr::group_by(Species) \%>\%
  dplyr::arrange(dplyr::desc(Sepal.Length)) \%>\%
  rank_in_group(.)

# display first few results
res \%>\%
  dplyr::filter(rank <= 3)

# There is also a way to do this just using dplyr:
by_species <- iris \%>\%
  dplyr::arrange(Species, Sepal.Length) \%>\%
  dplyr::group_by(Species) \%>\%
  dplyr::mutate(rank = rank(Sepal.Length, ties.method = "first"))

by_species \%>\%
  dplyr::filter(rank <= 3)

library(dplyr)

res2 <- rank_in_group2(data = iris,
                       group_var = Species,
                       arrange_var = Sepal.Length)

# display first few results
res2 \%>\%
  dplyr::filter(rank <= 3)
}
